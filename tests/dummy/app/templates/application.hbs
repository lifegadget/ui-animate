<div class="container">

  <p>
    <br>
  </p>
  <h2 id="title">ui-animate</h2>

  <h3>Overview</h3>
  <p>
    The idea is to provide a CSS based animation primitive which has no dependency on jQuery (or any 3rd party JS). It leverages the popular <a href="https://github.com/daneden/animate.css" target="_new">{{ui-label 'animate.css'}}</a> library (a set of CSS animations, no JS). Just 51kb in size but for those of you feel 51kb is more than you'd like to consume you can be specific about which animations you'd like to use. This is done through the use of one of two parameters (or both):
  </p>
  <p>
    <ul>
      <li>{{ui-pill 'include'}} - an array of specific CSS animations to include</li>
      <li>{{ui-pill 'includeGroup'}} - an array of CSS groups (such as "attention_seekers", "zooming_exits", etc.). See animate.css website for groups.</li>
    </ul>
  </p>
  <p>
    So for example, in this demo application we have added the following to our `environment.js` file:
<pre><code>
  var ENV = {
    uiAnimate: {
      include: ['rollIn'],
      includeGroup: ['attention_seekers']
    }
  }</code></pre>
  </p>
  <p>
    Refer to the <a href="http://daneden.github.io/animate.css" target="_new">{{ui-label 'animate.css'}}</a> website for all the default animations. If you want to add your own all you need do is define your own class name. Look at the source of the <a href="https://github.com/daneden/animate.css/blob/master/source/attention_seekers/bounce.css">bounce effect</a> to get a feeling for how to configure your CSS.
  </p>

  <h3>Using as inline component w/in an Ember component</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-pill tagName='div'}}
        Swinging
        {{ui-animate 'swing'}}
      {{/ui-pill}}
    </div>
    <div class="col-xs-5">
<pre><code>\{{#ui-pill tagName='div'}}
  Swinging
  \{{ui-animate 'swing'}}
\{{/ui-pill}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        When used inside an Ember block component, the {{ui-pill 'ui-animate'}} component will automatically target the "parentView" and animate it based on the stated event. Since the event isn't explicitly stated then the default "load" event is used.
      </p>
      <p>
        <note>
          <b>Note:</b> if the parent component has <b>tagName</b> set to <i>null</i> then it doesn't actually occupy any space in the DOM by default (even if its template does). In this case we do run into this with the {{ui-pill 'ui-pill'}} component but we can just set the tagName as DIV
        </note>
      </p>
    </div>
  </div>

  <p>
    <br>
  </p>

  <h3>Targeting a specific DOM element</h3>
  <div class="row">
    <div class="col-xs-2">
      <div id='myEffect'>
        <img src="images/rubber-duck.png" alt="" width="150px">
        <center>Rubber Ducky!</center>
      </div>
    </div>
    {{ui-animate 'rollIn' domElement='myEffect' delay=1 duration=4}}
    <div class="col-xs-5">
<pre><code>&lt;div id='myEffect'>
  &lt;img src="images/rubber-duck.png">
  &lt;center>Rubber Ducky!&lt;/center>
&lt;/div>

\{{ui-animate 'rollIn'
  domElement='myEffect'
  delay=1
  duration=4
}}
</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        If you want to target any specific DOM element with an animation effect that too is possible by leveraging the <b>domElement</b> property on {{ui-pill 'ui-animate'}}. Doesn't matter if this target is an Ember component or not.
      </p>
      <p>
        In this example we're using the <b>delay</b> property which indicates how many miliseconds it should wait before starting the animation. This can be used in conjunction with any of the supported events but will be frequently be used with the default <i>onload</i> event.
      </p>
      <p>
        Finally, we're also specifying an explicit duration of 4 seconds (the default is 1 second) with the <b>duration</b> parameter.
      </p>
    </div>
  </div>

  <p>
    <br>
  </p>

  <h3>Using as a block component</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'rubberBand' duration=2 event='click'}}
        {{ui-button title='press me'}}
        <br>
        or don't; it's up to you
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'rubberBand' event='click'}}
  \{{ui-button title='press me'}}
  &lt;br>
  or don't; it's up to you
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        Possibly the nicest way to use this component is as a <i>block component</i>. It will wrap whatever you put inside the block and animate it.
      </p>
      <p>
        This example also illustrates the use of different event ... a "click" in this case ... instead of the default of "load". You can use any DOM event you like here.
      </p>
      <p>
        Also note that in this use-case, it matters not whether the surrounding content is block-style or not, nor does it matter contained components are
      </p>
    </div>
  </div>

  <h3>To Infinity and Beyond</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'bounce' iterations='infinite'}}
        <img src='images/buzz-lightyear.png' width='150px'/>
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'bounce' iterations='infinite'}}
  &lt;img src='images/buzz-lightyear.png'>
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      Another thing you can do -- whether it's tacky or not we'll leave to your judgement -- is to repeat the animation to infinity. Of course, we're being a little dramatic by chosing 'infinite' as any integer value is also valid.
    </div>
  </div>

  <h3>Repetition the sincerest form of flattery</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'tada' repeat='infinite' delay=2}}
        {{ui-button title='buy me'}}
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'tada' repeat='infinite' delay=2}}
  &lt;img src='images/buzz-lightyear.png'>
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        <i>Iterations</i> are a CSS property which repeats the animation in immediate succession (once the initial "delay" has passed). <i>Repetition</i> will appear precisely the same if there is no delay but can be useful when teamed up with a delay. A good use case is subtle (or not so subtle) highlighting of a call-to-action button periodically to get the user paying attention to what you want them to.
      </p>
    </div>
  </div>

</div>
<p>
  <br>
</p>
