<div class="container">

  <p>
    <br>
  </p>
  <h2 id="title">ui-animate</h2>

  <h3>Overview</h3>
  <p>
    The idea is to provide a CSS based animation primitive which has no dependency on jQuery (or any 3rd party JS). It leverages the popular <a href="https://github.com/daneden/animate.css" target="_new">{{ui-tag 'animate.css'}}</a> library (a set of CSS animations, no JS). Just 51kb in size but for those of you feel 51kb is more than you'd like to consume you can be specific about which animations you'd like to use. This is done through the use of one of two parameters (or both):
  </p>
  <p>
    <ul>
      <li>{{ui-pill 'include'}} - an array of specific CSS animations to include</li>
      <li>{{ui-pill 'includeGroup'}} - an array of CSS groups (such as "attention_seekers", "zooming_exits", etc.). See animate.css website for groups.</li>
    </ul>
  </p>
  <p>
    So for example, in this demo application we have added the following to our `environment.js` file:
<pre><code>
  var ENV = {
    uiAnimate: {
      include: ['rollIn'],
      includeGroup: ['attention_seekers']
    }
  }</code></pre>
  </p>
  <p>
    Refer to the <a href="http://daneden.github.io/animate.css" target="_new">{{ui-tag 'animate.css'}}</a> website for all the default animations. If you want to add your own all you need do is define your own class name. Look at the source of the <a href="https://github.com/daneden/animate.css/blob/master/source/attention_seekers/bounce.css">bounce effect</a> to get a feeling for how to configure your CSS.
  </p>

  <h3>Using as inline component w/in an Ember component</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-pill tagName='div'}}
        Swinging
        {{ui-animate 'swing'}}
      {{/ui-pill}}
    </div>
    <div class="col-xs-5">
<pre><code>\{{#ui-pill tagName='div'}}
  Swinging
  \{{ui-animate 'swing'}}
\{{/ui-pill}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        When used inside an Ember block component, the {{ui-pill 'ui-animate'}} component will automatically target the "parentView" and animate it based on the stated event. Since the event isn't explicitly stated then the default "load" event is used.
      </p>
      <p>
        <note>
          <b>Note:</b> if the parent component has <b>tagName</b> set to <i>null</i> then it doesn't actually occupy any space in the DOM by default (even if its template does). In this case we do run into this with the {{ui-pill 'ui-pill'}} component but we can just set the tagName as DIV
        </note>
      </p>
    </div>
  </div>

  <p>
    <br>
  </p>

  <h3>Targeting a specific DOM element</h3>
  <div class="row">
    <div class="col-xs-2">
      <div id='myEffect'>
        <img src="images/rubber-duck.png" alt="" width="150px">
        <center>Rubber Ducky!</center>
      </div>
    </div>
    {{ui-animate 'rollIn' domElement='myEffect' delay=1 duration=4}}
    <div class="col-xs-5">
<pre><code>&lt;div id='myEffect'>
  &lt;img src="images/rubber-duck.png">
  &lt;center>Rubber Ducky!&lt;/center>
&lt;/div>

\{{ui-animate 'rollIn'
  domElement='myEffect'
  delay=1
  duration=4
}}
</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        If you want to target any specific DOM element with an animation effect that too is possible by leveraging the <b>domElement</b> property on {{ui-pill 'ui-animate'}}. Doesn't matter if this target is an Ember component or not.
      </p>
      <p>
        In this example we're using the <b>delay</b> property which indicates how many miliseconds it should wait before starting the animation. This can be used in conjunction with any of the supported events but will be frequently be used with the default <i>onload</i> event.
      </p>
      <p>
        Also note we're specifying an explicit duration of 4 seconds (the default is 1 second) with the <b>duration</b> parameter. Finally, if you don't have an explicit "DOM id" you can set the {{ui-tag 'domClass'}} property instead (do not include the standard jQuery 'dot' in the name). This will attach the animation to the <i>first</i> DOM instance which has the class.
      </p>
    </div>
  </div>

  <p>
    <br>
  </p>

  <h3>Using as a block component</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'rubberBand' duration=2 event='click'}}
        {{ui-button title='press me'}}
        <br>
        or don't; it's up to you
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'rubberBand' event='click'}}
  \{{ui-button title='press me'}}
  &lt;br>
  or don't; it's up to you
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        Possibly the nicest way to use this component is as a <i>block component</i>. It will wrap whatever you put inside the block and animate it.
      </p>
      <p>
        This example also illustrates the use of different event ... a "click" in this case ... instead of the default of "load". You can use any DOM event you like here or even use bespoke events for signalling.
      </p>
      <p>
        Also note that in this use-case, it matters not whether the surrounding content is block-style or not, nor does it matter contained components are tagless.
      </p>
    </div>
  </div>

  <h3>To Infinity and Beyond</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'bounce' iterations='infinite'}}
        <img src='images/buzz-lightyear.png' width='150px'/>
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'bounce' iterations='infinite'}}
  &lt;img src='images/buzz-lightyear.png'>
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      Another thing you can do -- whether it's tacky or not we'll leave to your judgement -- is to repeat the animation to infinity. Of course, we're being a little dramatic by chosing 'infinite' as any integer value is also valid.
    </div>
  </div>

  <h3>Repetition the sincerest form of flattery</h3>
  <div class="row">
    <div class="col-xs-2">
      {{#ui-animate 'tada'
        repeat='infinite'
        delay=2
      }}
        {{ui-button title='buy me'}}
      {{/ui-animate}}
    </div>
    <div class="col-xs-5">
  <pre><code>\{{#ui-animate 'tada'
  repeat='infinite'
  delay=2
}}
  \{{ui-button title='buy me'}}
\{{/ui-animate}}</code></pre>
    </div>
    <div class="col-xs-5">
      <p>
        <i>Iterations</i> are a CSS property which repeats the animation in immediate succession (once the initial "delay" has passed). <i>Repetition</i> will appear precisely the same if there is no delay but can be useful when teamed up with a delay. A good use case is subtle (or not so subtle) highlighting of a call-to-action button periodically to get the user paying attention to what you want them to.
      </p>
    </div>
  </div>

  <h3>Pre &amp; Post Conditions, Bespoke Events</h3>
  <div class="row">
    <div class="col-xs-2">
      {{ui-animate 'fadeOut'
        event='click'
        exit=true
        domElement='exit-button'
      }}
      {{ui-animate 'zoomIn'
        enter=true
        event='bespoke'
        domElement='hello-button'
      }}
      {{ui-animate 'fadeOutDown'
        exit=true
        event='click'
        domElement='hello-button'
        onCompletion=(action 'allGone')
      }}

      {{ui-button
        id='exit-button'
        title='exit me'
        onClick=(action 'nextButtonPlease')
      }}
      {{ui-button
        id='hello-button'
        title='hello'
      }}
    </div>
    <div class="col-xs-4">
  <pre><code>\{{ui-animate 'fadeOut'
  event='click'
  exit=true
  domElement='exit-button'
}}
\{{ui-animate 'zoomIn'
  event='bespoke'
  enter=true
  domElement='hello-button'
}}
\{{ui-animate 'fadeOutDown'
  event='click'
  exit=true
  domElement='hello-button'
  onCompletion=(action 'allGone')
}}

\{{ui-button
  id='exit-button'
  title='exit me'
  onClick=(action 'nextButtonPlease')
}}
\{{ui-button
  id='hello-button'
  title='hello'
}}</code></pre>
    </div>
    <div class="col-xs-6">
      <p>
        In the examples above you either had a "onload" event trigger (which somewhat masks pre-conditions) or an effect which completes in the same state as it starts (aka, the "attention grabbers"). There are, however, two important families of use-cases where you are "entering" and "exiting" a part of the DOM.
      </p>
      <p>
        In these situations you typically will have to ensure that the starting state (aka, pre-condition) and ending states (post-condition) are appropriately visible/not-visible. The animation from the library is only responsible for the movement between the two states.
      </p>
      <p>
        In this example, press the button for a <i>fadeOut</i> animation of the visible button. That will in turn, trigger a bespoke event which an initially hidden button receives and causes it to appear using the <i>zoomIn</i> animation.
      </p>
      <p>
        Here, we've taken advantage of the {{ui-tag 'enter'}} and {{ui-tag 'exit'}} properties which indicate the use-case of the annimation. When _enter_ is set to true then the CSS class {{ui-pill 'animation-ready'}} class is added on load and removed immediately before the animation. Similarly the _exit_ property set to true, a CSS class {{ui-pill 'animation-done'}} is added directly after the animation. By default, both CSS properties are simply set to <code>opacity: 0;</code>.
      </p>

      <p>
        On the demo app's controller, take a look at the action to see how we're creating and dispatching our custom event which we've called {{ui-pill 'bespoke'}}. This allows the initial button press to trigger the second button's entrance.
      </p>
      <p>
        Finally, we've added an action to the animator's {{ui-tag 'onCompletion'}} event which means that when the second button is finished exiting we can take over execution. Look at the console for a message when this event is triggered. Last point on this topic ... there is also a {{ui-tag 'onLoopCompletion'}} event that can be listened to which fires at the completion of each animation dictated by the <i>repeat</i> property.
      </p>
    </div>
  </div>

  <hr>
    <h3>TRANSITIONS | <i>from here to there</i></h3>
  <div class="row">
    <div class="col-sm-6 col-md-2">
      {{#ui-transition 'toy-story'
        animate='fadeInRight,fadeOutLeft'
        reverse='fadeInLeft,fadeOutRight'
        class='vertical'
        names='buz,woody,jessie'
        show=itemsSelected
        ordered=ordered
        inParallel=parallel
        duration=duration
        as |t|
      }}
        <img id="{{t.id.buz}}" width='100%' src='images/buzz-lightyear.png'>
        <img id={{t.id.woody}} width='100%' src='images/woody.png'>
        <img id={{t.id.jessie}} width='100%' src='images/jessie.png'>
      {{/ui-transition}}
    </div>
    <div class="col-sm-6 col-md-5">
  <pre><code>\{{#ui-transition 'toy-story'
  class='vertical'
  names='buz,woody,jessie'
  animate='fadeInRight,fadeOutLeft'{{#if ordered}}
  reverse='fadeInLeft,fadeOutRight'{{/if}}
  show='{{itemsSelected}}'
  ordered={{ordered}}
  inParallel={{parallel}}
  duration={{duration}}
  as |t|
}}
  &lt;img id=\{{t.id.buz}} src='images/buzz-lightyear.png'>
  &lt;img id=\{{t.id.woody}} src='images/woody.png'>
  &lt;img id=\{{t.id.jessie}} src='images/jessie.png'>
\{{/ui-transition}}</code></pre>
      <p>
        <hr>
      </p>
      <p>
        choose your character:
        <br>
        {{ui-buttons
          buttons='buz,woody,jessie'
          values=itemsSelected
          cardinality=(concat '1:' maxItems)
          onChange=(mut itemsSelected)
        }}
      </p>
      <p>
        how many characters can you choose?
        <br>
        {{ui-buttons
          buttons='1,2,3'
          value=maxItems
          cardinality='1:1'
          onChange=(mut maxItems)
        }}
        <br>
        <note>
          this just constrains the button selector above, not
          directly related to an animation feature
        </note>
      </p>
      <p>
        should animation be ordered?
        <br>
        {{ui-toggle-button
          value=ordered
          mood='secondary'
          onToggle=(mut ordered)
          on='yes'
          off='no'
        }}
      </p>
      <p>
        should the "in" and "out" animations be done in parallel?
        <br>
        {{ui-toggle-button
          value=parallel
          mood='secondary'
          onToggle=(mut parallel)
          on='yes'
          off='no'
        }}
      </p>
      <p>
        how long should the transition take?
        <br>
        {{ui-buttons
          buttons='0.5,1,2'
          value=duration
          cardinality='1:1'
          onChange=(mut duration)
        }}
        <br>
        <note>
          this just constrains the button selector above, not
          directly related to an animation feature
        </note>
      </p>
    </div>
    <div class="col-sm-12 col-md-5">
      <p>
        Annimations are great but here we're going a step further with <i>transitions</i> which use
        the {{ui-tag 'ui-transition'}} component which in turns uses {{ui-tag 'ui-animate'}} as a primitive for animation.
      </p>
      <p>
        Whether we're using the <i>block</i> or <i>inline</i> variant, this component will need to know
        the DOM id's of the various parts of the transition. In this example we've chosen the block style
        and with this model the {{ui-pill 'names'}} property provides an array (or csv) of unique ids.
      </p>

      <note>
        With the <b>inline</b> control you would use the {{ui-pill 'ids'}} property to tell it what unique id's to use (aka, ownership of the ids is externalized to container).
      </note>

      <p>
        The {{ui-tag 'show'}} property is what determines which elements are showing. When this value changes
        it triggers the animation to take place and uses the "in" and "out" effects during this process.
      </p>

      <note>
        The "in" and "out" properties are not explicitly referenced in this example, instead they are defined
        as <i>position parameters</i> (considering they are always required by a transition). If no animation
        is assigned to "out" then the "in" animation will be used.
      </note>

      <p>
        Finally, the {{ui-pill 'ordered'}} property can be set as a boolean flag (default is <i>false</i>).
        When set to <i>true</i> it takes into account the order of the names/ids it is managing and uses
        the reverse
      </p>
    </div>
  </div>


</div>
<p>
  <br>
</p>
